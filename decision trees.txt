import pandas as pd
data = pandas.read_csv("Data1.csv", header=0)
col_a = list(data.X)
col_b = list(data.Y)
col_c = list(data.C)

import matplotlib.pyplot as plt
plt.scatter(col_a, col_b)
df=pd.DataFrame(data={'A':col_a,'B':col_b,'C':col_c})
import matplotlib.cm as cm
points = plt.scatter(df.A, df.B, c=df.C,cmap="jet", lw=0)
plt.colorbar(points)

import numpy as np
import pandas as pd
from sklearn.cross_validation import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn import tree
import os
import pydotplus
from IPython.display import Image
from mlxtend.plotting import plot_decision_regions
from sklearn.metrics import average_precision_score
#Loading DatasetPython
data = pd.read_csv('Data1.csv')
os.environ["PATH"] += os.pathsep + '\\Users\\likhitha\\Anaconda3\\Library\\bin\\graphviz'

#for splitting
from sklearn.model_selection import KFold

X = data.loc[:,'X':'Y'] # features
Y= data.loc[:,'C'] # target label
kf = KFold(n_splits=5)
kf.get_n_splits(X)
#print(kf)  
KFold(n_splits=5, random_state=None, shuffle=False)
X_value= data.values[:,0:1]
Y_value= data.values [:,2]
#Y_value= list(map(int, Y_value))
Features = ['X']
accuracy = 0
for train_index, test_index in kf.split(X):
#    print("TRAIN:", train_index, "TEST:", test_index)
    X_train, X_test = X_value[train_index], X_value[test_index]
    y_train, y_test = Y_value[train_index], Y_value[test_index]
    decision_tree = DecisionTreeClassifier(criterion = "entropy", random_state = 200, min_samples_leaf = 2)
    clf_entropy = decision_tree
    clf_entropy.fit(X_train, y_train)
    y_pred_en = clf_entropy.predict(X_test)
    print ("Accuracy is ", accuracy_score(y_test,y_pred_en)*100)
    print("Precision: ",metrics.precision_score(y_test, y_pred_en))
    print("Recall: ",metrics.recall_score(y_test, y_pred_en))
    #if(accuracy < accuracy_score(y_test,y_pred_en)*100):
        #accuracy = accuracy_score(y_test,y_pred_en)*100
#print(accuracy)
fit = decision_tree.fit(X_train,y_train)   # Decision tree, Infromation gai
dot_data = tree.export_graphviz(fit, feature_names = Features, out_file=None, filled=True, rounded=True)
graph = pydotplus.graph_from_dot_data(dot_data)
Image(graph.create_png())
#Y_value = Y_value.astype(int)
#= map(int, Y_value)
#plot_decision_regions(X_value, Y_value, clf = decision_tree, legend = 1)